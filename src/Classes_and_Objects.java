/*********** Урок 18: Инкапсуляция. Сеттеры и геттеры ************/

/*
Инкапсуляция — это один из ключевых принципов объектно-ориентированного программирования (ООП),
который заключается в сокрытии деталей реализации класса и предоставлении доступа к данным только
через специально определённые методы. Основная цель инкапсуляции — защитить данные объекта
от некорректного использования и обеспечить их целостность.

Сокрытие данных (скрытие реализации):

Поля (переменные) объекта обычно объявляются с модификатором доступа private,
что делает их недоступными напрямую извне.
Для доступа к этим полям предоставляются публичные методы (геттеры и сеттеры),
которые позволяют управлять тем, как данные изменяются и читаются.
*/
public class Classes_and_Objects {
    public static void main(String[] args) {

        Person person = new Person();
        person.setName("John");
        person.setAge(22);
        System.out.println("Hi, my name is " + person.getName() + " and i am " + person.getAge());

    }

}

class Person {
    // Модификатор private делает доступным только внутри класса, в котором он определен.
    private String name;
    private int age;


    //______Сеттеры и геттеры_______

    public void setName(String newName) {
       if(newName.isEmpty()){
           System.out.println("Имя не может быть пустым");
       }
       else {
           name = newName;
       }

    }

    public String getName() {
        return name;
    }

    public void setAge(int newAge) {
        if(newAge < 0){
            System.out.println("Возраст должен быть положительным");
        } else {
            age = newAge;
        }

    }
    public int getAge() {
        return age;
    }


    /*
    Модификатор доступа public перед сеттерами и геттерами в Java используется для того,
    чтобы явно указать, что они доступны из любого места в программе. Хотя ты можешь не указывать
    модификатор, это приведет к тому, что метод будет иметь так называемый
    package-private (доступ по умолчанию), что означает, что к нему можно будет
    обращаться только из классов, находящихся в том же пакете.
    */
}
