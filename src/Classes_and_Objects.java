/*********** Урок 32: Восходящее и нисходящее преобразование  ************/

/*
Восходящее и нисходящее преобразование (или кастинг) в Java — это механизмы преобразования типов объектов
в иерархии классов и интерфейсов. Эти операции позволяют объектам быть гибкими в контексте полиморфизма,
наследования и интерфейсов.

1. Восходящее преобразование (Upcasting)
Восходящее преобразование происходит, когда объект подкласса приводится к типу суперкласса (родительского класса).
Это безопасная операция и происходит неявно.

2. Нисходящее преобразование — это обратный процесс, когда объект суперкласса приводится к типу подкласса.
В отличие от восходящего, это операция явная и может быть небезопасной. Программист должен быть уверен,
что объект на самом деле является экземпляром подкласса, иначе возникнет исключение.

Таким образом при восходящем преобразовании "отсекаются" методы класса-наследника, остаются только методы
того класса, к которому совершается восходящее преобразование.
При нисходящем преобразовании методы класса-наследника как раз таки приобретаются.
*/
public class Classes_and_Objects {
    public static void main(String[] args) {

        Dog dog = new Dog();  // Объект подкласса
        Animal animal = dog;  // Восходящее преобразование: Dog к Animal

        animal.sound();  // Вывод: "Dog barks"
        /*
        Восходящее преобразование происходит неявно, когда объект типа Dog приводится к типу Animal.
        Это безопасно, так как объект Dog является наследником Animal
        */



        Animal animal2 = new Cat(); // Восходящее преобразование: Cat к Animal
        Cat cat = (Cat) animal2;  // Нисходящее преобразование: Animal к Cat
        cat.sound();  // Вывод: "Cat meow"
        cat.went();
        /*
        1) Мы сначала выполняем восходящее преобразование (Cat к Animal).
        2) Затем выполняем явное нисходящее преобразование, преобразуя обратно объект Animal в объект Cat.
        Это возможно, потому что реальный объект является экземпляром класса Cat, а не просто Animal.
        */


    }

}

class Animal {
    public void sound() {
        System.out.println("Animal makes a sound");
    }

}

class Dog extends Animal {
    @Override
    public void sound() {
        System.out.println("Dog barks");
    }

    void go(){

    }
}

class Cat extends Animal{

    @Override
    public void sound(){
        System.out.println("Cat meow");
    }
    void went(){

    }
}