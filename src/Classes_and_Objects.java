/*********** Урок 29: Полиморфизм  ************/

/*
Полиморфизм — это способность одного и того же метода выполнять разные действия
в зависимости от объекта, который его вызывает.

___статический полиморфизм___
- Достигается через перегрузку методов (method overloading).
Методы с одинаковым именем, но разными параметрами, могут существовать в одном классе.
Выбор метода для вызова происходит на этапе компиляции, исходя из параметров вызова.

___динамический полиморфизм___
- Достигается через переопределение методов (method overriding)
Метод, определённый в базовом классе, может быть переопределён в производных классах
для выполнения специфической для них логики. На этапе выполнения (runtime) вызывается
метод того класса, объект которого фактически используется.
*/
public class Classes_and_Objects {
    public static void main(String[] args) {
        Animal myDog = new Dog();
        myDog.eat(); // Полиморфизм

        Cat myCat = new Cat();
        test(myCat); // Полиморфизм

    }


    public static void test(Animal animal){
        animal.eat();
    }

}


class Animal{
    public void eat(){
        System.out.println("Animal is eating.");
    }
}

class Dog extends Animal{

    /*
    Классы-наследники могут предоставить свою реализацию метода, который был определён
    в родительском классе. Это позволяет классам вести себя по-разному при одинаковом
    интерфейсе.
    */
    @Override
    public void eat(){
        System.out.println("Dog is eating.");
    }
    
}

class Cat extends Animal{

    @Override
    public void eat(){
        System.out.println("Cat is eating.");
    }
}